import maraboupy.MarabouNetworkNNet as M

# 16개 실수를 리스트로 받고 8개 실수를 선택하는 프로그램을 작성한다.
# 선택된 실수의 자리는 1, 선택되지 않은 실수의 자리는 0으로 바꾼 리스트를 리턴.
# 선택된 8개의 최소값은 선택되지 않은 8개의 최대값 보다 크다.
def select_eight(inputs):
    selected = [0] * len(inputs)
    sorted_indices = sorted(range(len(inputs)), key=lambda i: inputs[i], reverse=True)
    print(sorted_indices)
    for i in sorted_indices: 
        print(inputs[i])

    # Select the first 8 indices
    for i in sorted_indices[:8]:
        selected[i] = 1
    
    return selected

m = M.MarabouNetworkNNet(filename="wirelessModel.nnet")

inputs_train0 = [0.4351, 0.2385, 0.1743, 0.3080, 0.0905, 0.1245, 0.3448, 0.1973, 0.2243,
        0.2810, 0.1219, 0.2892, 0.1043, 0.2310, 0.1864, 0.1822, 0.2385, 0.5802,
        0.0449, 0.3868, 0.1906, 0.1606, 0.3379, 0.2146, 0.2203, 0.3362, 0.2636,
        0.1132, 0.1475, 0.4429, 0.1194, 0.0842, 0.1743, 0.0449, 0.7444, 0.0954,
        0.2324, 0.2242, 0.2588, 0.0896, 0.0688, 0.1552, 0.1090, 0.2095, 0.1746,
        0.3849, 0.1414, 0.1609, 0.3080, 0.3868, 0.0954, 0.8753, 0.0380, 0.2899,
        0.5271, 0.1878, 0.3547, 0.3455, 0.3582, 0.3520, 0.0994, 0.3297, 0.2396,
        0.4460, 0.0905, 0.1906, 0.2324, 0.0380, 0.5365, 0.0376, 0.1338, 0.2000,
        0.0688, 0.0788, 0.0506, 0.2274, 0.0346, 0.3261, 0.1368, 0.2395, 0.1245,
        0.1606, 0.2242, 0.2899, 0.0376, 0.6611, 0.1801, 0.0435, 0.2502, 0.1639,
        0.0830, 0.2901, 0.1620, 0.2338, 0.1782, 0.3399, 0.3448, 0.3379, 0.2588,
        0.5271, 0.1338, 0.1801, 1.0000, 0.1619, 0.1125, 0.4319, 0.0830, 0.3599,
        0.2755, 0.1608, 0.2988, 0.1279, 0.1973, 0.2146, 0.0896, 0.1878, 0.2000,
        0.0435, 0.1619, 0.3422, 0.0799, 0.2217, 0.1545, 0.2365, 0.0720, 0.2017,
        0.1358, 0.1169, 0.2243, 0.2203, 0.0688, 0.3547, 0.0688, 0.2502, 0.1125,
        0.0799, 0.4526, 0.0618, 0.1765, 0.2342, 0.0765, 0.3438, 0.2254, 0.3057,
        0.2810, 0.3362, 0.1552, 0.3455, 0.0788, 0.1639, 0.4319, 0.2217, 0.0618,
        0.8887, 0.0716, 0.2695, 0.1635, 0.1963, 0.0446, 0.1989, 0.1219, 0.2636,
        0.1090, 0.3582, 0.0506, 0.0830, 0.0830, 0.1545, 0.1765, 0.0716, 0.6298,
        0.1001, 0.1864, 0.1113, 0.1704, 0.1562, 0.2892, 0.1132, 0.2095, 0.3520,
        0.2274, 0.2901, 0.3599, 0.2365, 0.2342, 0.2695, 0.1001, 0.7121, 0.0709,
        0.2899, 0.2208, 0.1609, 0.1043, 0.1475, 0.1746, 0.0994, 0.0346, 0.1620,
        0.2755, 0.0720, 0.0765, 0.1635, 0.1864, 0.0709, 0.5077, 0.1165, 0.1332,
        0.1885, 0.2310, 0.4429, 0.3849, 0.3297, 0.3261, 0.2338, 0.1608, 0.2017,
        0.3438, 0.1963, 0.1113, 0.2899, 0.1165, 0.8339, 0.1823, 0.1495, 0.1864,
        0.1194, 0.1414, 0.2396, 0.1368, 0.1782, 0.2988, 0.1358, 0.2254, 0.0446,
        0.1704, 0.2208, 0.1332, 0.1823, 0.4368, 0.3046, 0.1822, 0.0842, 0.1609,
        0.4460, 0.2395, 0.3399, 0.1279, 0.1169, 0.3057, 0.1989, 0.1562, 0.1609,
        0.1885, 0.1495, 0.3046, 0.7584]

inputs_test0 = [0.3135, 0.0312, 0.1237, 0.0697, 0.0584, 0.0958, 0.1386, 0.1761, 0.0653,
        0.0926, 0.1379, 0.1802, 0.2131, 0.1445, 0.1582, 0.1315, 0.0312, 0.4954,
        0.1145, 0.2049, 0.0859, 0.0604, 0.2991, 0.1488, 0.0797, 0.1100, 0.2388,
        0.0970, 0.2481, 0.3114, 0.1523, 0.1424, 0.1237, 0.1145, 0.5205, 0.2187,
        0.1907, 0.2574, 0.2875, 0.1364, 0.1351, 0.3261, 0.1578, 0.1495, 0.1989,
        0.2175, 0.1790, 0.1931, 0.0697, 0.2049, 0.2187, 0.7593, 0.1233, 0.0834,
        0.1942, 0.1764, 0.1923, 0.2431, 0.2170, 0.0132, 0.4197, 0.3466, 0.2156,
        0.0490, 0.0584, 0.0859, 0.1907, 0.1233, 0.2884, 0.1881, 0.1175, 0.0715,
        0.1580, 0.1140, 0.0334, 0.1368, 0.0479, 0.0896, 0.1178, 0.1432, 0.0958,
        0.0604, 0.2574, 0.0834, 0.1881, 0.4371, 0.0964, 0.1069, 0.2520, 0.2525,
        0.0525, 0.0969, 0.1274, 0.2761, 0.1822, 0.1812, 0.1386, 0.2991, 0.2875,
        0.1942, 0.1175, 0.0964, 0.7052, 0.1115, 0.0919, 0.3309, 0.2054, 0.3563,
        0.1553, 0.2626, 0.2292, 0.2170, 0.1761, 0.1488, 0.1364, 0.1764, 0.0715,
        0.1069, 0.1115, 0.4339, 0.2809, 0.0717, 0.0952, 0.0841, 0.0531, 0.2334,
        0.1379, 0.2863, 0.0653, 0.0797, 0.1351, 0.1923, 0.1580, 0.2520, 0.0919,
        0.2809, 0.5019, 0.0842, 0.1555, 0.1322, 0.0872, 0.2947, 0.1319, 0.3025,
        0.0926, 0.1100, 0.3261, 0.2431, 0.1140, 0.2525, 0.3309, 0.0717, 0.0842,
        0.3740, 0.1044, 0.1743, 0.1225, 0.3014, 0.2060, 0.0768, 0.1379, 0.2388,
        0.1578, 0.2170, 0.0334, 0.0525, 0.2054, 0.0952, 0.1555, 0.1044, 0.5550,
        0.1025, 0.2150, 0.3026, 0.1583, 0.1810, 0.1802, 0.0970, 0.1495, 0.0132,
        0.1368, 0.0969, 0.3563, 0.0841, 0.1322, 0.1743, 0.1025, 0.5583, 0.2245,
        0.2881, 0.0758, 0.1007, 0.2131, 0.2481, 0.1989, 0.4197, 0.0479, 0.1274,
        0.1553, 0.0531, 0.0872, 0.1225, 0.2150, 0.2245, 1.0000, 0.2726, 0.2415,
        0.1300, 0.1445, 0.3114, 0.2175, 0.3466, 0.0896, 0.2761, 0.2626, 0.2334,
        0.2947, 0.3014, 0.3026, 0.2881, 0.2726, 0.8654, 0.1424, 0.1279, 0.1582,
        0.1523, 0.1790, 0.2156, 0.1178, 0.1822, 0.2292, 0.1379, 0.1319, 0.2060,
        0.1583, 0.0758, 0.2415, 0.1424, 0.3506, 0.0865, 0.1315, 0.1424, 0.1931,
        0.0490, 0.1432, 0.1812, 0.2170, 0.2863, 0.3025, 0.0768, 0.1810, 0.1007,
        0.1300, 0.1279, 0.0865, 0.5562]

inputs_test2 = [1.0000, 0.2187, 0.2372, 0.4056, 0.0699, 0.3015, 0.3316, 0.2400, 0.1342,
        0.3927, 0.2266, 0.5234, 0.3135, 0.3440, 0.1578, 0.2406, 0.2187, 0.2894,
        0.0850, 0.1116, 0.1871, 0.0390, 0.0467, 0.2052, 0.2272, 0.2010, 0.2410,
        0.2267, 0.1839, 0.3029, 0.1638, 0.1715, 0.2372, 0.0850, 0.4481, 0.2464,
        0.1950, 0.2014, 0.1348, 0.3723, 0.0086, 0.2042, 0.1422, 0.1893, 0.2713,
        0.1524, 0.2017, 0.1042, 0.4056, 0.1116, 0.2464, 0.8653, 0.2282, 0.0337,
        0.2624, 0.1922, 0.4077, 0.4805, 0.0994, 0.1886, 0.2537, 0.1659, 0.2427,
        0.2597, 0.0699, 0.1871, 0.1950, 0.2282, 0.6827, 0.1171, 0.3244, 0.0563,
        0.4328, 0.2273, 0.2472, 0.1415, 0.3651, 0.2141, 0.2394, 0.3643, 0.3015,
        0.0390, 0.2014, 0.0337, 0.1171, 0.3777, 0.1800, 0.1029, 0.2006, 0.1094,
        0.1043, 0.2174, 0.1200, 0.0588, 0.1739, 0.2454, 0.3316, 0.0467, 0.1348,
        0.2624, 0.3244, 0.1800, 0.7591, 0.1416, 0.2051, 0.0317, 0.1587, 0.3140,
        0.2672, 0.1064, 0.2328, 0.3077, 0.2400, 0.2052, 0.3723, 0.1922, 0.0563,
        0.1029, 0.1416, 0.7834, 0.2029, 0.2813, 0.1349, 0.0784, 0.3551, 0.2014,
        0.2531, 0.0963, 0.1342, 0.2272, 0.0086, 0.4077, 0.4328, 0.2006, 0.2051,
        0.2029, 0.7004, 0.3360, 0.1775, 0.0558, 0.2694, 0.2538, 0.0614, 0.3916,
        0.3927, 0.2010, 0.2042, 0.4805, 0.2273, 0.1094, 0.0317, 0.2813, 0.3360,
        0.5203, 0.0889, 0.2388, 0.2447, 0.2877, 0.2274, 0.0169, 0.2266, 0.2410,
        0.1422, 0.0994, 0.2472, 0.1043, 0.1587, 0.1349, 0.1775, 0.0889, 0.5163,
        0.2438, 0.2886, 0.0988, 0.0264, 0.2098, 0.5234, 0.2267, 0.1893, 0.1886,
        0.1415, 0.2174, 0.3140, 0.0784, 0.0558, 0.2388, 0.2438, 0.6957, 0.3770,
        0.3616, 0.2045, 0.0892, 0.3135, 0.1839, 0.2713, 0.2537, 0.3651, 0.1200,
        0.2672, 0.3551, 0.2694, 0.2447, 0.2886, 0.3770, 0.9940, 0.3402, 0.1700,
        0.1739, 0.3440, 0.3029, 0.1524, 0.1659, 0.2141, 0.0588, 0.1064, 0.2014,
        0.2538, 0.2877, 0.0988, 0.3616, 0.3402, 0.9404, 0.0759, 0.0652, 0.1578,
        0.1638, 0.2017, 0.2427, 0.2394, 0.1739, 0.2328, 0.2531, 0.0614, 0.2274,
        0.0264, 0.2045, 0.1700, 0.0759, 0.5348, 0.1441, 0.2406, 0.1715, 0.1042,
        0.2597, 0.3643, 0.2454, 0.3077, 0.0963, 0.3916, 0.0169, 0.2098, 0.0892,
        0.1739, 0.0652, 0.1441, 0.5625]        

expected_test0 = [1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1.]

expected_test2 = [1., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0.]

expected_train0 = [0., 0., 1., 0., 0., 1., 1., 0., 0., 1., 1., 0., 1., 1., 0., 1.]


output = m.evaluateNNet(inputs_train0)

print("Output(values): ", output)
print("Output(selected): ", select_eight(output))
print("Expected: ", expected_train0)

# exitCode, vals, stats = m.solve()

# print("exitCode: ")
# print(exitCode)

# print("vals:")
# print(vals)

# print("stats:")
# print(stats)


